buildscript {
    ext.sqldelight_version = '1.2.0'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.squareup.sqldelight:gradle-plugin:$sqldelight_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.41'
}

repositories {
    mavenCentral()
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'
apply plugin: 'com.squareup.sqldelight'

kotlin {
//    jvm()
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
//        jvmMain {
//            dependencies {
//                implementation kotlin('stdlib')
//            }
//        }
//        jvmTest {
//            dependencies {
//                implementation kotlin('test')
//                implementation kotlin('test-junit')
//            }
//        }
        iosMain {
            dependencies {
                implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
            }
        }
        iosTest {
        }
    }
}

sqldelight {
    MainDatabase {
        //package name used for the generated MyDatabase.kt
        packageName = "renoteDB"

        // An array of folders where the plugin will read your '.sq' and '.sqm' files.
        // The folders are relative to the existing source set so if you specify ["db"],
        // the plugin will look into 'src/main/db'
        // Defaults to ["sqldelight"] (src/main/sqldelight)
//        sourceFolders = ["db"]

        // The directory where to store '.db' schema files relative to the root of the project.
        // These files are used to verify that migrations yield a database with the latest schema.
        // Defaults to null so the verification tasks will not be created.
//        schemaOutputDirectory = file("src/commonMain/sqldelight/databases")

        // Optionally specify schema dependencies on other gradle projects
//        dependency project(':OtherProject')
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

configurations {
    compileClasspath
}